{
    "observation": "Require Import Coq.Setoids.Setoid.\n Require Import Coq.ZArith.ZArith.\n Require Import Coq.micromega.Psatz.\n Local Open Scope Z.\n Definition mono (f: Z -> Z): Prop :=   forall n m, n <= m -> f n <= f m.\n  Lemma const_mono: forall a: Z,   mono (fun x => a). \n(**********)\n(** Fill in your proof here*)\n(**********)",
    "planning_context": "\n1. Understand the problem:\n   - The goal is to prove the theorem 'const_mono'\n   - This theorem states that a constant function is monotonic\n\n2. Analyze the definitions:\n   - 'mono' is defined as a function that preserves order\n   - The constant function is defined as (fun x => a), where 'a' is a constant\n\n3. Plan the proof structure:\n   a) Start with 'intros' to bring the constant 'a' and the variables needed for 'mono' into context\n   b) Unfold the definition of 'mono'\n   c) Simplify the goal by reducing the constant function\n\n4. Proving strategy:\n   - The key insight is that for any two inputs, a constant function always returns the same value\n   - Therefore, the output will always be less than or equal to itself, satisfying the monotonicity condition\n\n5. Proof steps:\n   a) Introduce the constant 'a' and the variables 'n' and 'm'\n   b) Introduce the hypothesis for n <= m\n   c) Unfold the definition of 'mono'\n   d) Simplify the constant function applications\n   e) The goal should reduce to 'a <= a'\n   f) Use reflexivity of '<=' to prove the goal\n\n6. Possible tactics to use:\n   - intros\n   - unfold mono\n   - simpl\n   - reflexivity\n\n7. Finalize:\n   - Ensure all goals are closed\n   - Use 'Qed' to complete the proof\n",
    "reasoning": "\nGiven that we are at the beginning of the proof and no actions have been taken yet, we should start by following the planned proof structure. The first step is to introduce the necessary variables into the context.\n\nReasoning:\n1. We need to introduce the constant 'a' which is the parameter of our constant function.\n2. We also need to introduce the variables 'n' and 'm' that are used in the definition of 'mono'.\n3. Finally, we should introduce the hypothesis that n <= m.\n\nThese introductions will set up our proof environment with all the necessary elements to proceed with proving the monotonicity of the constant function.\n\nAfter these introductions, our goal should be transformed into a form that reflects the definition of 'mono' applied to our constant function. This will prepare us for the next steps of unfolding the 'mono' definition and simplifying the constant function applications.\n\nTherefore, I recommend that the acting agent use the 'intros' tactic to bring these elements into the proof context. This will align with our planned proof structure and set the stage for the subsequent steps in our proof strategy.\n",
    "reflection": "",
    "action": "Confirm final proving process: \nintros a n m H.\nunfold mono.\nsimpl.\nreflexivity.\n"
}