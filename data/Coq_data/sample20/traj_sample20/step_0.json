{
    "observation": "Require Import Coq.Setoids.Setoid.\n Require Import Coq.ZArith.ZArith.\n Require Import Coq.micromega.Psatz.\n Local Open Scope Z.\n  Definition mono (f: Z -> Z): Prop :=   forall n m, n <= m -> f n <= f m.\n  Definition Zcomp (f g: Z -> Z): Z -> Z :=   fun x => f (g x).\n   Lemma mono_compose: forall f g,   mono f ->   mono g ->   mono (Zcomp f g). \n(**********)\n(** Fill in your proof here*)\n(**********)",
    "planning_context": "\n1. Understand the problem:\n   - The goal is to prove the lemma 'mono_compose'.\n   - We need to show that the composition of two monotonic functions is also monotonic.\n   - Key definitions: mono, Zcomp\n\n2. Set up the proof:\n   - Start with 'Proof.'\n   - Introduce the variables and hypotheses:\n     * f and g (the two functions)\n     * Hf (monotonicity of f)\n     * Hg (monotonicity of g)\n\n3. Unfold definitions:\n   - Unfold the definitions of 'mono' and 'Zcomp' to work with their explicit forms.\n\n4. Introduce additional variables:\n   - Introduce n and m (the input values)\n   - Introduce the hypothesis n <= m\n\n5. Prove monotonicity of the composed function:\n   - Show that (Zcomp f g) n <= (Zcomp f g) m\n   - This can be broken down into two steps:\n     a. Show that g n <= g m (using monotonicity of g)\n     b. Show that f (g n) <= f (g m) (using monotonicity of f)\n\n6. Apply transitivity of inequality:\n   - Use transitivity to connect the inequalities from steps 5a and 5b\n\n7. Use the hypotheses:\n   - Apply Hg to prove g n <= g m\n   - Apply Hf to prove f (g n) <= f (g m)\n\n8. Conclude the proof:\n   - The goal should now be solved\n   - End with 'Qed.'\n\n9. Additional tactics that might be useful:\n   - intros, unfold, apply, transitivity, assumption\n",
    "reasoning": "\nGiven that we are at the beginning of the proof, we should start by following the initial steps of our plan. The first steps involve setting up the proof structure and introducing the necessary variables and hypotheses. Here's the reasoning for the next actions:\n\n1. Begin the proof with the 'Proof.' command.\n\n2. Introduce the variables and hypotheses:\n   - We need to introduce f and g as the two functions.\n   - We also need to introduce the hypotheses for the monotonicity of f and g.\n   Use the 'intros' tactic for this step.\n\n3. Unfold the definitions of 'mono' and 'Zcomp':\n   - This will allow us to work with the explicit forms of these definitions.\n   - Use the 'unfold' tactic for both 'mono' and 'Zcomp'.\n\n4. Introduce additional variables for the proof:\n   - We need to introduce n and m as the input values.\n   - We also need to introduce the hypothesis that n <= m.\n   Use the 'intros' tactic again for this step.\n\n5. State the goal we want to prove:\n   - We need to show that (Zcomp f g) n <= (Zcomp f g) m.\n   This goal should be automatically generated after the previous steps, but it's important to verify it.\n\nThese steps will set up the proof structure and prepare us for the main part of the proof where we'll show the monotonicity of the composed function. After these steps, we'll be ready to apply the monotonicity properties of f and g to prove our goal.\n",
    "reflection": "",
    "action": "\nProof.\nintros f g Hf Hg.\nunfold mono, Zcomp.\nintros n m Hnm.\n"
}