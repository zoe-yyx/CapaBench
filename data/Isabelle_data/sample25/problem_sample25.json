{
    "problem": "theory MulAssoc\n  imports Main\nbegin\n\ndatatype mynat = MyZero (\"0\") | MySuc mynat\n\nfun myadd :: \"mynat \\<Rightarrow> mynat \\<Rightarrow> mynat\" where\n  \"myadd MyZero m = m\" |\n  \"myadd (MySuc n) m = MySuc (myadd n m)\"\n\nfun mymul :: \"mynat \\<Rightarrow> mynat \\<Rightarrow> mynat\" where\n  \"mymul MyZero m = MyZero\" |\n  \"mymul (MySuc n) m = myadd m (mymul n m)\"\n\ntheorem mymul_add_distr_r: \"mymul (myadd n m) p = myadd (mymul n p) (mymul m p)\"\n  sorry\n\ntheorem myadd_assoc: \"myadd n (myadd m p) = myadd (myadd n m) p\"\n  sorry\n\n\ntheorem mul_assoc: \"mymul n (mymul m p) = mymul (mymul n m) p\"\n(* Fill Your Proof Here *)\nend",
    "proof": "proof (induction n)\n  case MyZero\n  then show ?case by simp\nnext\n  case (MySuc n)\n  then show ?case\n    using mymul_add_distr_r by (simp add: myadd_assoc)\nqed\n\nend",
    "proposition": "mul_assoc",
    "id": 25
}