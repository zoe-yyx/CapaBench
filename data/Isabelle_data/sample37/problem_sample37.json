{
    "problem": "theory MulSuccR\n  imports Main\nbegin\n\ndatatype mynat = MyZero (\"0\") | MySuc mynat\n\nfun myadd :: \"mynat \\<Rightarrow> mynat \\<Rightarrow> mynat\" where\n  \"myadd MyZero m = m\" |\n  \"myadd (MySuc n) m = MySuc (myadd n m)\"\n\nfun mymul :: \"mynat \\<Rightarrow> mynat \\<Rightarrow> mynat\" where\n  \"mymul MyZero m = MyZero\" |\n  \"mymul (MySuc n) m = myadd m (mymul n m)\"\n\nlemma myadd_succ_r: \"myadd n (MySuc m) = MySuc (myadd n m)\"\n  by (induction n; simp)\n\ntheorem myadd_assoc: \"myadd n (myadd m p) = myadd (myadd n m) p\"\n  by (induction n; simp)\n\nlemma mul_succ_r: \"mymul n (MySuc m) = myadd (mymul n m) n\"\n(* Fill Your Proof Here *)\nend",
    "proof": "proof (induction n)\n  case MyZero\n  then show ?case by simp\nnext\n  case (MySuc n)\n  then show ?case \n    using myadd_succ_r myadd_assoc by simp\nqed\n\nend",
    "proposition": "mul_succ_r",
    "id": 37
}