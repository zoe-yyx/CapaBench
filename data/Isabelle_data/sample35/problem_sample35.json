{
    "problem": "theory MulComm\n  imports Main\nbegin\n\ndatatype mynat = MyZero (\"0\") | MySuc mynat\n\nfun myadd :: \"mynat \\<Rightarrow> mynat \\<Rightarrow> mynat\" where\n  \"myadd MyZero m = m\" |\n  \"myadd (MySuc n) m = MySuc (myadd n m)\"\n\nfun mymul :: \"mynat \\<Rightarrow> mynat \\<Rightarrow> mynat\" where\n  \"mymul MyZero m = MyZero\" |\n  \"mymul (MySuc n) m = myadd m (mymul n m)\"\n\nlemma myadd_comm: \"myadd n m = myadd m n\"\n  sorry\n\nlemma mymul_0_r: \"mymul n MyZero = MyZero\"\n  sorry\n\nlemma mymul_succ_r: \"mymul n (MySuc m) = myadd (mymul n m) n\"\n  sorry\n\ntheorem mul_comm: \"mymul n m = mymul m n\"\n(* Fill Your Proof Here *)\nend",
    "proof": null,
    "proposition": null,
    "id": null
}